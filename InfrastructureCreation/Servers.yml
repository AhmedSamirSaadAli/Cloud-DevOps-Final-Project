Description: >
    Ahmed Samir / FinalProject  
    Servers 

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        
    AMItoUse:
        Description: AMI to use for our base image
        Type: String

Resources:

    WebInstance:
        Type: AWS::EC2::Instance
        Properties:
          KeyName: publicpublic
          UserData:
              Fn::Base64: !Sub |
                  #!/bin/bash
                  sudo su
                  apt-get update -y       
          InstanceType: t2.nano
          ImageId: !Ref AMItoUse
          InstanceType: t2.medium          
          KeyName: AWS_Ahmed
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
             VolumeSize: '10'     
          NetworkInterfaces: 
            - AssociatePublicIpAddress: "true"
              DeviceIndex: "0"
              GroupSet: 
                - Ref: BastionSecurityGroup
              SubnetId: 
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-PUB-SN"


    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Bastion Host Security Group
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0



  #############################################################
    EKSSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
          GroupDescription: EKS Cluster Security Group
          Tags: 
            - Key: Environment
              Value: !Ref EnvironmentName
          VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
            IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref BastionSecurityGroup
            

    EKSCLuster:
        Type: 'AWS::EKS::Cluster'
        Properties:
          Name: PROD
          Version: 1.21
          RoleArn: !GetAtt EKSClusterRole.Arn ##################################################
          ResourcesVpcConfig:
            SecurityGroupIds:
              - !Ref EKSSecurityGroup
            SubnetIds:
              - Fn::ImportValue: !Sub ${EnvironmentName}-PRI1-SN
              - Fn::ImportValue: !Sub ${EnvironmentName}-PRI2-SN



    EKSNodegroup:
        Type: 'AWS::EKS::Nodegroup'
        Properties:
          ClusterName: !Ref EKSCLuster
          NodeRole:  !GetAtt EKSNodeRole.Arn  ##################################################
          ScalingConfig:
            MinSize: 1
            DesiredSize: 2
            MaxSize: 3
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}-PRI1-SN
            - Fn::ImportValue: !Sub ${EnvironmentName}-PRI2-SN

    EKSClusterRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - eks.amazonaws.com
              Action:
              - sts:AssumeRole
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

    EKSNodeRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
              - sts:AssumeRole
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            
